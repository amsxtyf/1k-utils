"use strict";(self.webpackChunkdocusaurus_2=self.webpackChunkdocusaurus_2||[]).push([[573],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return T}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),d=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=d(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=d(t),T=i,f=u["".concat(c,".").concat(T)]||u[T]||p[T]||o;return t?r.createElement(f,a(a({ref:n},l),{},{components:t})):r.createElement(f,a({ref:n},l))}));function T(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=u;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var d=2;d<o;d++)a[d]=t[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8169:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return d},toc:function(){return l},default:function(){return u}});var r=t(3117),i=t(102),o=(t(7294),t(3905)),a=["components"],s={title:"TreeActions"},c=void 0,d={unversionedId:"TreeActions",id:"TreeActions",isDocsHomePage:!1,title:"TreeActions",description:"Types",source:"@site/docs/TreeActions.md",sourceDirName:".",slug:"/TreeActions",permalink:"/docs/TreeActions",tags:[],version:"current",frontMatter:{title:"TreeActions"},sidebar:"defaultSidebar",previous:{title:"RouterSystem",permalink:"/docs/RouterSystem"},next:{title:"base64ToBlob",permalink:"/docs/base64ToBlob"}},l=[{value:"Types",id:"types",children:[],level:2},{value:"Usage",id:"usage",children:[],level:2}],p={toc:l};function u(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"types"},"Types"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"class TreeActions {\n    public treeList: insideTreeNodeType[]\n    protected fieldNames: configType['fieldNames']\n    protected fetchNode: configType['fetchNode']\n    protected fetchParentNode: configType['fetchParentNode']\n    /**\n     *\n     * @param treeList\n     * @param parentTree\n     * @param fieldNames default: {id: 'id', children: children}\n     */\n    static transformTreeList: (\n        treeList: treeNodeType[],\n        parentTree?: insideTreeNodeType,\n        fieldNames?: configType['fieldNames']\n    ) => insideTreeNodeType[]\n    /**\n     * @description Merge currentPath to parentPath.\n     * @param parentPath\n     * @param currentPath\n     * @returns whole path\n     */\n    static mergePath: (parentPath: string, currentPath: string) => string\n    /**\n     * @description transform indexPath to lodash.get path.\n     * @description indexToLodashPath('0-1-2') -> '[0].children[1].children[2]'\n     * @param indexPath\n     * @returns lodash usable path\n     */\n    static indexToLodashPath: (indexPath: string) => string\n    /**\n     * @param path\n     * @returns By default, return parent path.\n     * @returns If you set allPath as true, return every path from top level node to tail\n     */\n    static getWholePath: (path: string) => string[]\n    /**\n     * @param ids ids\n     * @param isSameChain true -> BFS, false -> DFS\n     * @returns treeNodes\n     */\n    public getTreeNodes: (ids: string[], isSameChain = false) => insideTreeNodeType[]\n\n    public reverseLoadNode: (nodeId: string) => Promise<void>\n}\n")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { TreeActions } from '1k-utils'\nimport { insideTreeNodeType } from '1k-utils/esm/TreeActions'\nimport { cloneDeep, omit } from 'lodash'\n\nconst SEARCH_LIST = [\n    {\n        title: '1',\n        id: '1',\n        children: [\n            {\n                title: '1-1',\n                id: '1-1',\n                children: [\n                    {\n                        title: '1-1-1',\n                        id: '1-1-1'\n                    }\n                ]\n            }\n        ]\n    },\n    {\n        title: '2',\n        id: '2',\n        children: [\n            {\n                title: '2-1',\n                id: '2-1',\n                children: [\n                    {\n                        title: '2-1-1',\n                        id: '2-1-1'\n                    }\n                ]\n            }\n        ]\n    }\n]\nconst INSIDE_SEARCH_LIST = TreeActions.transformTreeList(SEARCH_LIST)\n\nconst TREE_LIST = [\n    cloneDeep(omit(SEARCH_LIST[0], ['children'])),\n    cloneDeep(omit(SEARCH_LIST[1], ['children']))\n]\nconst INSIDE_TREE_LIST: insideTreeNodeType[] = TreeActions.transformTreeList(TREE_LIST)\n\nconst originTreeAction = new TreeActions(SEARCH_LIST, {\n    fetchNode: async () => ({}),\n    fetchParentNode: async () => ({})\n})\n\nconst treeActions = new TreeActions(TREE_LIST, {\n    fetchNode: async nodeId => {\n        return originTreeAction.getTreeNodes([nodeId])[0]\n    },\n    fetchParentNode: async node => {\n        const parentId = TreeActions.getWholePath(node.id).slice(-2, -1)\n        return originTreeAction.getTreeNodes(parentId)[0]\n    }\n})\n\nTreeActions.transformTreeList(TREE_LIST) // INSIDE_TREE_LIST\n//TREE_LIST -> INSIDE_TREE_LIST\nTreeActions.getWholePath('1-1-1') // ['1', '1-1', '1-1-1']\nTreeActions.mergePath('1-1', '1') // '1-1-1'\nTreeActions.indexToLodashPath('1-1-1') // '[1].children[1].children[1]'\n\nawait treeActions.reverseLoadNode('1-1-1')\nawait treeActions.reverseLoadNode('2-1-1')\n// treeActions.treeList -> TreeActions.transformTreeList(SEARCH_LIST)\n\ntreeActions.getTreeNodes([SEARCH_LIST[0].id, SEARCH_LIST[0].children[0].id], true)\n// [INSIDE_SEARCH_LIST[0], INSIDE_SEARCH_LIST[0].__children__[0]]\ntreeActions.getTreeNodes([SEARCH_LIST[0].id, SEARCH_LIST[1].children[0].id])\n// [ INSIDE_SEARCH_LIST[0], INSIDE_SEARCH_LIST[1].__children__[0] ]\n")))}u.isMDXComponent=!0}}]);