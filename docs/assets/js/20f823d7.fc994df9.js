"use strict";(self.webpackChunkdocusaurus_2=self.webpackChunkdocusaurus_2||[]).push([[344],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return f}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var a=r.createContext({}),d=function(e){var n=r.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},l=function(e){var n=d(e.components);return r.createElement(a.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,a=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=d(t),f=i,m=p["".concat(a,".").concat(f)]||p[f]||u[f]||o;return t?r.createElement(m,c(c({ref:n},l),{},{components:t})):r.createElement(m,c({ref:n},l))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,c=new Array(o);c[0]=p;var s={};for(var a in n)hasOwnProperty.call(n,a)&&(s[a]=n[a]);s.originalType=e,s.mdxType="string"==typeof e?e:i,c[1]=s;for(var d=2;d<o;d++)c[d]=t[d];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},2230:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return a},metadata:function(){return d},toc:function(){return l},default:function(){return p}});var r=t(3117),i=t(102),o=(t(7294),t(3905)),c=["components"],s={title:"treeActions"},a=void 0,d={unversionedId:"treeActions",id:"treeActions",isDocsHomePage:!1,title:"treeActions",description:"Types",source:"@site/docs/treeActions.md",sourceDirName:".",slug:"/treeActions",permalink:"/docs/treeActions",tags:[],version:"current",frontMatter:{title:"treeActions"},sidebar:"defaultSidebar",previous:{title:"storage",permalink:"/docs/storage"}},l=[{value:"Types",id:"types",children:[],level:2},{value:"Usage",id:"usage",children:[],level:2}],u={toc:l};function p(e){var n=e.components,t=(0,i.Z)(e,c);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"types"},"Types"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"function mergePath(parentPath: string, currentPath: string): string\nfunction indexToLodashPath(indexPath: string): string\nfunction getParentPath(indexPath: string, allPath?: boolean): undefined | string | string[]\nfunction customize({ treeList, setTreeNode, parentTree, childrenKey }): treeNode[]\nfunction getTreeNodes(treeList: any[], ids: string[], isSameChain?: boolean): any[]\nfunction loadParentTree(\n    treeList: any[],\n    nodeId: string,\n    fetchTreeNode: (parentId: string) => Promise<treeNode>\n): Promise<treeNode>\n")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import treeActions from '../src/treeActions'\nimport _ from 'lodash'\n\nconst TREE_LIST = [\n    {\n        title: '1',\n        id: '1',\n        children: [\n            {\n                title: '1-1',\n                id: '1-1',\n                ParentId: '1',\n                children: [\n                    {\n                        title: '1-1-1',\n                        id: '1-1-1',\n                        ParentId: '1-1'\n                    }\n                ]\n            }\n        ]\n    }\n]\nconst LEVEL_TOP = TREE_LIST[0]\nconst LEVEL_1 = TREE_LIST[0].children[0]\nconst LEVEL_2 = TREE_LIST[0].children[0].children[0]\n\nconst IDS = ['1-1-1']\n\ntreeActions.getParentPath('1-1-1')\n// => '1-1'\ntreeActions.getParentPath('1-1-1', true)\n// => ['1', '1-1']\ntreeActions.mergePath('1-1', '1')\n// => '1-1-1'\ntreeActions.indexToLodashPath('1-1-1')\n// => '[1].children[1].children[1]'\ntreeActions.getTreeNodes(TREE_LIST, IDS)\n// => [LEVEL_2]\ntreeActions.getTreeNodes(TREE_LIST, [LEVEL_TOP.id, LEVEL_1.id, LEVEL_2.id], true)\n// => [LEVEL_TOP, LEVEL_1, LEVEL_2]\nconst treeList = _.cloneDeep(TREE_LIST)\nconst result = treeActions.customize({\n    treeList,\n    childrenKey: 'children',\n    setTreeNode: treeNode => {\n        treeNode.custom = 'custom'\n    }\n})\n// result/treeList => [\n//     {\n//         title: '1',\n//         id: '1',\n//         indexPath: '0',\n//         custom: 'custom',\n//         children: [\n//             {\n//                 title: '1-1',\n//                 id: '1-1',\n//                 ParentId: '1',\n//                 indexPath: '0-0',\n//                 custom: 'custom',\n//                 children: [\n//                     {\n//                         title: '1-1-1',\n//                         id: '1-1-1',\n//                         ParentId: '1-1',\n//                         indexPath: '0-0-0',\n//                         custom: 'custom'\n//                     }\n//                 ]\n//             }\n//         ]\n//     }\n// ]\n\nconst treeList = treeActions.customize({\n    treeList: [_.omit(LEVEL_TOP, 'children')],\n    childrenKey: 'children'\n})\nconst result = await treeActions.loadParentTree(treeList, '1-1-1', async nodeId => {\n    const treeNode = await Promise.resolve(treeActions.getTreeNodes(TREE_LIST, [nodeId]))\n    return treeActions.customize({ treeList: treeNode, childrenKey: 'children' })[0]\n})\n// result => { ParentId: '1-1', id: '1-1-1', indexPath: '0-0-0', title: '1-1-1' }\n// treeList => [\n//     {\n//         title: '1',\n//         id: '1',\n//         indexPath: '0',\n//         children: [\n//             {\n//                 title: '1-1',\n//                 id: '1-1',\n//                 ParentId: '1',\n//                 indexPath: '0-0',\n//                 children: [\n//                     {\n//                         title: '1-1-1',\n//                         id: '1-1-1',\n//                         ParentId: '1-1',\n//                         indexPath: '0-0-0'\n//                     }\n//                 ]\n//             }\n//         ]\n//     }\n// ]\n")))}p.isMDXComponent=!0}}]);